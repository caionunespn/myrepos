{"version":3,"sources":["store/ducks/repositories/types.ts","components/RepositoryItem/index.tsx","store/ducks/repositories/actions.ts","components/RepositoryList/index.tsx","store/ducks/repositories/index.ts","store/ducks/rootReducer.ts","providers/config.ts","store/ducks/repositories/sagas.ts","store/ducks/rootSaga.ts","store/index.ts","App.tsx","index.tsx"],"names":["RepositoriesTypes","RepositoryItem","repository","href","name","target","rel","RepositoryList","repositories","useSelector","state","data","dispatch","useDispatch","useEffect","action","LOAD_REQUEST","map","key","id","INITIAL_STATE","error","loading","reducer","type","LOAD_SUCCESS","payload","LOAD_FAILURE","combineReducers","axios","create","baseURL","load","call","provider","get","response","put","rootSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAIYA,E,wCCeGC,EAZyB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACzC,OACE,uBACEC,KAAI,yCAAoCD,EAAWE,MACnDC,OAAO,SACPC,IAAI,uBAEJ,4BAAKJ,EAAWE,Q,kBDVVJ,K,0CAAAA,E,0CAAAA,E,2CAAAA,M,KEDL,ICiCQO,EAzBkB,WAAO,IAC9BC,EAAiBC,aACvB,SAACC,GAAD,MAAY,CACVF,aAAcE,EAAMF,aAAaG,SAF7BH,aAMFI,EAAWC,cAMjB,OAJAC,qBAAU,WACRF,EDlB6BG,iBAAOf,EAAkBgB,iBCmBrD,CAACJ,IAGF,oCACE,+CACA,4BACGJ,EAAaS,KAAI,SAACf,GAAD,OAChB,kBAAC,EAAD,CAAgBgB,IAAKhB,EAAWiB,GAAIjB,WAAYA,U,+BC1BpDkB,EAAmC,CACvCT,KAAM,GACNU,OAAO,EACPC,SAAS,GAqBIC,EAlB6B,WAAoC,IAAnCb,EAAkC,uDAA1BU,EAAeL,EAAW,uCAC7E,OAAQA,EAAOS,MACb,KAAKxB,EAAkBgB,aACrB,OAAO,eAAKN,EAAZ,CAAmBY,SAAS,IAC9B,KAAKtB,EAAkByB,aACrB,OAAO,eACFf,EADL,CAEEY,SAAS,EACTD,OAAO,EACPV,KAAMI,EAAOW,QAAQf,OAEzB,KAAKX,EAAkB2B,aACrB,OAAO,eAAKjB,EAAZ,CAAmBY,SAAS,EAAOD,OAAO,EAAMV,KAAM,KACxD,QACE,OAAOD,ICpBEkB,cAAgB,CAC7BpB,iB,+BCFaqB,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,2B,WCCMC,GAAV,SAAUA,IAAV,uEAEc,OAFd,kBAEoBC,YAAKC,EAASC,IAAK,2BAFvC,OAGH,OADMC,EAFH,gBAGGC,aLFkB1B,EKEFyB,EAASzB,KLDjCI,iBAAOf,EAAkByB,aAAc,CAAEd,WKFpC,8BAKH,OALG,mCAKG0B,YLDuBtB,iBAAOf,EAAkB2B,eKJnD,kCLCoB,IAAChB,IKDrB,gB,eCAkB2B,GAAV,SAAUA,IAAV,iEACN,OADM,SACAC,YAAI,CAACC,YAAWxC,EAAkBgB,aAAcgB,KADhD,+ECMf,IAAMS,EAAiBC,cAEjBC,EAAiCC,YACrCC,EACAC,YAAgBL,IAGlBA,EAAeM,IAAIT,GAEJK,QCHAK,EARO,WACpB,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QCPNM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e011c656.chunk.js","sourcesContent":["/**\n * Action Types\n */\n\nexport enum RepositoriesTypes {\n  LOAD_REQUEST = \"@repositories/LOAD_REQUEST\",\n  LOAD_SUCCESS = \"@repositories/LOAD_SUCCESS\",\n  LOAD_FAILURE = \"@repositories/LOAD_FAILURE\",\n}\n\n/**\n * Data types\n */\n\nexport interface Repository {\n  id: number;\n  name: string;\n}\n\n/**\n * State type\n */\n\nexport interface RepositoriesState {\n  readonly data: Repository[];\n  readonly loading: boolean;\n  readonly error: boolean;\n}\n","import React from \"react\";\nimport { Repository } from \"../../store/ducks/repositories/types\";\n\ninterface Props {\n  repository: Repository;\n}\n\nconst RepositoryItem: React.FC<Props> = ({ repository }) => {\n  return (\n    <a\n      href={`https://github.com/caionunespn/${repository.name}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <li>{repository.name}</li>\n    </a>\n  );\n};\n\nexport default RepositoryItem;\n","import { action } from \"typesafe-actions\";\nimport { RepositoriesTypes, Repository } from \"./types\";\n\nexport const loadRequest = () => action(RepositoriesTypes.LOAD_REQUEST);\n\nexport const loadSuccess = (data: Repository[]) =>\n  action(RepositoriesTypes.LOAD_SUCCESS, { data });\n\nexport const loadFailure = () => action(RepositoriesTypes.LOAD_FAILURE);\n","import React, { useEffect } from \"react\";\nimport RepositoryItem from \"../RepositoryItem\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ApplicationState } from \"../../store\";\nimport { Repository } from \"../../store/ducks/repositories/types\";\nimport * as RepositoryActions from \"../../store/ducks/repositories/actions\";\n\ninterface StateProps {\n  repositories: Repository[];\n}\n\nconst RepositoryList: React.FC = () => {\n  const { repositories } = useSelector<ApplicationState, StateProps>(\n    (state) => ({\n      repositories: state.repositories.data,\n    })\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(RepositoryActions.loadRequest());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h5>My repositories</h5>\n      <ul>\n        {repositories.map((repository) => (\n          <RepositoryItem key={repository.id} repository={repository} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default RepositoryList;\n","import { Reducer } from \"redux\";\nimport { RepositoriesState, RepositoriesTypes } from \"./types\";\n\nconst INITIAL_STATE: RepositoriesState = {\n  data: [],\n  error: false,\n  loading: false,\n};\n\nconst reducer: Reducer<RepositoriesState> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case RepositoriesTypes.LOAD_REQUEST:\n      return { ...state, loading: true };\n    case RepositoriesTypes.LOAD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.payload.data,\n      };\n    case RepositoriesTypes.LOAD_FAILURE:\n      return { ...state, loading: false, error: true, data: [] };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport repositories from \"./repositories\";\n\nexport default combineReducers({\n  repositories,\n});\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://api.github.com\",\n});\n","import { call, put } from \"redux-saga/effects\";\nimport provider from \"../../../providers/config\";\nimport { loadSuccess, loadFailure } from \"./actions\";\n\nexport function* load() {\n  try {\n    const response = yield call(provider.get, \"users/caionunespn/repos\");\n    yield put(loadSuccess(response.data));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\n","import { all, takeLatest } from \"redux-saga/effects\";\nimport { RepositoriesTypes } from \"./repositories/types\";\nimport { load } from \"./repositories/sagas\";\n\nexport default function* rootSaga() {\n  return yield all([takeLatest(RepositoriesTypes.LOAD_REQUEST, load)]);\n}\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { RepositoriesState } from \"./ducks/repositories/types\";\nimport rootReducer from \"./ducks/rootReducer\";\nimport rootSaga from \"./ducks/rootSaga\";\n\nexport interface ApplicationState {\n  repositories: RepositoriesState;\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store: Store<ApplicationState> = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport RepositoryList from \"./components/RepositoryList\";\n\nimport \"./global.css\";\n\nimport store from \"./store\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <RepositoryList />\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}